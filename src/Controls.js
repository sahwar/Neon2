/** @module Controls */

import * as Color from "./Color.js";
import * as Compatibility from "./Compatibility.js";
import * as Contents from "./Contents.js";
import * as Cursor from "./Cursor.js";
import * as Text from "./Text.js";
import * as Select from "./Select.js";
import Icons from "./img/icons.svg";
import * as Notification from "./Notification.js";

/** @type {module:Zoom~ZoomHandler} */
var zoomHandler;

/**
 * Initialize listeners and controls for display panel.
 * @param {module:Zoom~ZoomHandler} zHandler - An instantiated ZoomHandler.
 */
export function initDisplayControls (zHandler) {
    zoomHandler = zHandler;

    setZoomControls();
    setOpacityControls();
    setBackgroundOpacityControls();
    setSylControls();
    setHighlightControls();
    setBurgerControls();

    document.getElementById("toggleDisplay").addEventListener("click", () => {
        let displayContents = document.getElementById("displayContents");
        let toggleDisplay = document.getElementById("toggleDisplay");
        if (toggleDisplay.matches(":hidden")) {
            displayContents.style.display = "";
            toggleDisplay.setAttribute("xlink:href", Icons + "#dropdown-down");
        }
        else {
            displayContents.style.display = "none";
            toggleDisplay.setAttribute("xlink:href", Icons + "#dropdown-side");
        }
    });
}

/**
 * Set zoom control listener for button and slider
 */
function setZoomControls() {
    $("#zoomSlider").val(100);
    $("#reset-zoom").click(() => {
        $("#zoomOutput").val(100);
        $("#zoomSlider").val(100);
        zoomHandler.resetZoomAndPan();
    });

    $(document).on("input change", "#zoomSlider", () => {
        zoomHandler.zoomTo($("#zoomOutput").val() / 100.0);
    });

    $("body").on("keydown", (evt) => {
        let currentZoom = parseInt($("#zoomOutput").val());
        if (evt.key === "+") { // increase zoom by 20
            let newZoom = Math.min(currentZoom + 20, parseInt($("#zoomSlider").attr("max")));
            zoomHandler.zoomTo(newZoom / 100.0);
            $("#zoomOutput").val(newZoom);
            $("#zoomSlider").val(newZoom);
        }
        else if (evt.key === "-") { // decrease zoom by 20
            let newZoom = Math.max(currentZoom - 20, parseInt($("#zoomSlider").attr("min")));
            zoomHandler.zoomTo(newZoom / 100.0);
            $("#zoomOutput").val(newZoom);
            $("#zoomSlider").val(newZoom);
        }
        else if (evt.key === "0") {
            $("#zoomOutput").val(100);
            $("#zoomSlider").val(100);
            zoomHandler.resetZoomAndPan();
        }
    });
}

/**
 * Set rendered MEI opacity button and slider listeners.
 */
function setOpacityControls() {
    $("#opacitySlider").val(100);
    $("#reset-opacity").click( function() {
        // Definition scale is the root element of what is generated by verovio
        $(".definition-scale").css("opacity", 1);

        $("#opacitySlider").val(100);
        $("#opacityOutput").val(100);
    });

    $(document).on('input change', '#opacitySlider', setOpacityFromSlider);
}

/** * Set background image opacity button and slider listeners.
 */
function setBackgroundOpacityControls() {
    $("#bgOpacitySlider").val(100);
    $("#reset-bg-opacity").click( function() {
        $("#bgimg").css("opacity", 1);

        $("#bgOpacitySlider").val(100);
        $("#bgOpacityOutput").val(100);
    });

    $(document).on('input change', '#bgOpacitySlider', function () {
        $("#bgimg").css("opacity", $("#bgOpacityOutput").val() / 100.0);
    });
}

/**
 * Set listener on syllable visibility checkbox.
 */
export function setSylControls() {
    updateSylVisibility();
    $("#displayText").click(updateSylVisibility);
}

/**
 * Set listener on info visibility checkbox.
 */
export function setInfoControls() {
    updateInfoVisibility();
    $("#displayInfo").click(updateInfoVisibility);
}

/**
 * Update MEI opacity to value from the slider.
 */
export function setOpacityFromSlider() {
    $(".definition-scale").css("opacity", $("#opacityOutput").val() / 100.0);
};


/**
 * Set listener on staff highlighting checkbox.
 */
export function setHighlightControls() {
    document.getElementById("highlight-button").addEventListener("click", (evt) => {
        evt.stopPropagation();
        let highlightDropdown = document.getElementById("highlight-dropdown");
        highlightDropdown.classList.toggle("is-active");
        if (highlightDropdown.classList.contains("is-active")) {
            body.addEventListener("click", highlightClickaway, { once: true });
            document.getElementById("highlight-staff").addEventListener("click", () => {
                document.getElementById("highlight-dropdown").classList.remove("is-active");
                document.getElementsByClassName("highlight-selected").forEach(e => {
                    e.classList.remove("highlight-selected");
                });
                document.getElementById("highlight-staff").classList.add("highlight-selected");
                document.getElementById("highlight-type").innerHTML = "&nbsp;- Staff";
                Color.setGroupingHighlight("staff");
            });
            document.getElementById("highlight-syllable").addEventListener("click", () => {
                document.getElementById("highlight-dropdown").classList.remove("is-active");
                document.getElementsByClassName("highlight-selected").forEach(e => {
                    e.classList.remove("highlight-selected");
                });
                document.getElementById("highlight-syllable").classList.add("highlight-selected");
                document.getElementById("highlight-type").innerHTML = "&nbsp;- Syllable";
                Color.setGroupingHighlight("syllable");
            });
            document.getElementById("highlight-neume").addEventListener("click", () => {
                document.getElementById("highlight-dropdown").classList.remove("is-active");
                document.getElementsByClassName("highlight-selected").forEach(e => {
                    e.classList.remove("highlight-selected");
                });
                document.getElementById("highlight-neume").classList.add("highlight-neume");
                document.getElementById("highlight-type").innerHTML = "&nbsp;- Neume";
                Color.setGroupingHighlight("neume");
            });
            document.getElementById("highlight-none").addEventListener("click", () => {
                document.getElementById("highlight-dropdown").classList.remove("is-active");
                document.getElementsByClassName("highlight-selected").forEach(e => {
                    e.classList.remove("highlight-selected");
                });
                document.getElementById("highlight-stype").innerHTML = "&nbsp;- Off";
                Color.unsetGroupingHighlight();
            });
        }
        else {
            body.removeEventListener("click", highlightClickaway);
        }
    });
}
/**
 * Set listener on burger menu for smaller screens.
 */
function setBurgerControls () {
    document.getElementById("burgerMenu").addEventListener("click", () => {
        this.classList.toggle("is-active");
        document.getElementById("navMenu").classList.toggle("is-active");
    });
}

/**
 * Clickaway listener for the highlight dropdown.
 */
function highlightClickaway () {
    body.removeEventListener("click", highlightClickaway);
    document.getElementById("highlight-dropdown").classList.remove("is-active");
}

/**
 * Update the visibility of the text box and set handlers.
 */
export function updateSylVisibility() {
    if (document.getElementById("displayText").matches(":checked")) {
        let sylText = document.getElementById("syl_text");
        sylText.style.display = "";
        sylText.innerHTML = "<p>" + Text.getSylText() + "</p>";
        let ps = Array.from(sylText.children).filter(elem => { elem.tagName === "p"; });
        Array.from(ps.children).filter(elem => { elem.tagName === "span"; }).forEach(span => {
            span.addEventListener("mouseenter", () => {
                let syllable = document.getElementById(span.className);
                syllable.classList.addClass("syl-select");
                syllable.setAttribute("fill", "#d00");
            });
            span.addEventListener("mouseleave", () => {
                let syllable = document.getElementById(span.className)
                syllable.classList.remove("syl-select");
                syllable.removeAttribute("fill");
            });
        });

        if (Text.editText) {
            setTextEdit();
        }
    } else {
        document.getElementById("syl_text").style.display = "none";
    }
}

/**
 * Update the visibility of infoBox
 */
export function updateInfoVisibility() {
    if (document.getElementById("displayInfo").matches(":checked")) {
        document.getElementById("neume_info").innerHTML = "<article class='message' style='display: none;'><div class='message-header'><p></p>" +
            "<button class='delete' id='notification-delete' aria-label='delete'></button></div>" +
            "<div class='message-body'></div>";
    }
    else {
        document.getElementById("neume_info").innerHTML = "";
    }
}

/**
 * Set text to edit mode.
 */
export function setTextEdit() {
    let spans = Array.from($("#syl_text").children("p").children("span"));
    spans.forEach(span => {
        $(span).off("click");
        $(span).on("click", update);
        function update() {
            Text.updateSylText(span);
        }
    });
}

/**
 * Reset the highlight for different types based on the 'highlight-selected' class in the DOM.
 */
export function updateHighlight() {
    let highlightId = document.getElementsByClassName("highlight-selected")[0].id;
    switch (highlightId) {
        case "highlight-staff":
            Color.setGroupingHighlight("staff");
            break;
        case "highlight-syllable":
            Color.setGroupingHighlight("syllable");
            break;
        case "highlight-neume":
            Color.setGroupingHighlight("neume");
            break;
        default:
            Color.unsetGroupingHighlight();
    }
}


/**
 * Initialize Edit and Insert control panels.
 * @param {NeonView} neonView - The NeonView parent.
 */
export function initInsertEditControls(neonView) {
    document.getElementById("toggleInsert").addEventListener("click", () => {
        let insertContents = document.getElementById("insertContents");
        let toggleInsert = document.getElementById("toggleInsert");
        if (insertContents.matches(":hidden")) {
            insertContents.style.display = "";
            toggleInsert.setAttribute("xlink:href", Icons + "#dropdown-down");
        }
        else {
            insertContents.style.display = "none";
            toggleInsert.setAttribute("xlink:href", Icons + "#dropdown-side");
        }
    });

    document.getElementById("toggleEdit").addEventListener("click", () => {
        let editContents = document.getElementById("editContents");
        let toggleEdit = document.getElementById("toggleEdit");
        if (editContents.matches(":hidden")) {
            editContents.style.display = "";
            toggleEdit.setAttribute("xlink:href", Icons + "#dropdown-down");
        }
        else {
            editContents.style.display = "none";
            toggleEdit.setAttribute("xlink:href", Icons + "#dropdown-side");
        }
    });

    document.getElementById("undo").addEventListener("click", undoHandler);
    body.addEventListener("keydown", (evt) => {
        if (evt.key === "z" && (evt.ctrlKey || evt.metaKey)) {
            undoHandler(evt);
        }
    });

    document.getElementById("redo").addEventListener("click", redoHandler);
    body.addEventListener("keydown", (evt) => {
        if ((evt.key === "Z" || (evt.key === "z" && evt.shiftKey)) && (evt.ctrlKey || evt.metaKey)) {
            redoHandler(evt);
        }
    });

    document.getElementById("delete").addEventListener("click", removeHandler);
    body.addEventListener("keydown", (evt) => {
        if (evt.key === "d" || evt.key === "Backspace")
            removeHandler(evt);
    });

    function undoHandler () {
        if (!neonView.undo()) {
            console.error("Failed to undo action.");
        } else {
            neonView.refreshPage();
        }
    }

    function redoHandler () {
        if (!neonView.redo()) {
            console.error("Failed to redo action");
        } else {
            neonView.refreshPage();
        }
    }

    function removeHandler () {
        let toRemove = [];
        var selected = Array.from(document.getElementsByClassName("selected"));
        selected.forEach(elem => {
            toRemove.push(
                {
                    "action": "remove",
                    "param": {
                        "elementId": elem.id
                    }
                }
            );
        });
        let chainAction = {
            "action": "chain",
            "param": toRemove
        };
        neonView.edit(chainAction);
        neonView.refreshPage();
    }
}

/**
 * Bind listeners to insert tabs.'
 * @param {InsertHandler} insertHandler - An InsertHandler to run the tasks.
 */
export function bindInsertTabs(insertHandler) {
    Array.from(document.getElementsByClassName("insertTab")).forEach(tab => {
        tab.addEventListener("click", () => {
            deactivate("insertTab");
            activate(tab.id, insertHandler);
            Cursor.resetCursor();
            document.getElementById("insert_data").innerHTML = Contents.insertTabHtml[tab.id];
            bindElements(insertHandler);
        });
    });
}

/**
 * Bind listeners to insert tab elements.
 * @param {InsertHandler} insertHandler - An InsertHandler object.
 */
function bindElements(insertHandler) {
    Array.from(document.getElementsByClassName("insertel")).forEach(elem => {
        elem.addEventListener("click", () => {
            deactivate("insertel");
            activate(el.id, insertHandler);
            Cursor.updateCursor();
        });
    });
}

/**
 * Activate a certain insert action.
 * @param {string} id - The ID of the insert action tab.
 * @param {InsertHandler} insertHandler - An InsertHandler object.
 */
function activate(id, insertHandler) {
    document.getElementById(id).classList.add("is-active");
    insertHandler.insertActive(id);
}

/**
 * Deactivate a certain insert action.
 * @param {string} class - The class name to select for.
 */
function deactivate(type) {
    Array.from(document.getElementsByClassName(type)).forEach(elem => {
        elem.classList.remove("is-active");
    });
}

/**
 * Set listener on switching EditMode button to File dropdown in the navbar.
 * @param {string} filename - The name of the MEI file.
 * @param {NeonView} neonView
 */
export function initNavbar(filename, neonView) {
    // setup navbar listeners
    document.getElementById("save").addEventListener("click", () => {
        neonView.saveMEI();
    });
    body.addEventListener("keydown", (evt) => {
        if (evt.key === "s") {
            neonView.saveMEI();
        }
    });

    document.getElementById("revert").addEventListener("click", () => {
        if (confirm("Reverting will cause all changes to be lost. Press OK to continue.")) {
            Compatibility.revertFile(filename);
        }
    });

    //mei download link
    document.getElementById("getmei").setAttribute("href", filename);

    //png download setup
    let regex = /mei/g;
    var pngFile = filename.replace(regex, "png");
    if (Compatibility.getMode () === Compatibility.modes.pages) {
        pngFile = pngFile.replace("png", "img");
    }
    document.getElementById("getpng").setAttribute("href", pngFile);

    if (Compatibility.getMode() === Compatibility.modes.rodan) {
        document.getElementById("finalize").addEventListener("click", () => {
            if (confirm("Finalizing will save your work and end the job. You will not be able to resume it. Continue?")) {
                Compatibility.finalize(neonView.rodanGetMei());
            }
        });
    }
}

/**
 * Set listener on EditMode button.
 * @param {EditMode} editMode - The EditMode object.
 */
export function initEditMode(editMode) {
    $("#edit_mode").on("click", function(){
        $("#dropdown_toggle").empty();
        $("#dropdown_toggle").append(Contents.navbarDropdownMenu);
        if (Compatibility.getMode() === Compatibility.modes.rodan) {
            $("#navbar-dropdown-options").append(Contents.navbarFinalize);
        }
        $("#insert_controls").append(Contents.insertControlsPanel);
        $("#edit_controls").append(Contents.editControlsPanel);

        editMode.init();
    });
}

/**
 * Set listeners on the buttons to change selection modes.
 */
export function initSelectionButtons() {
    $("#selBySyl").on("click", selectBySylHandler);
    $("body").on("keydown", (evt) => {
        if (evt.key === "1") {
            selectBySylHandler(evt);
        }
    });

    function selectBySylHandler() {
        if (!$("#selBySyl").hasClass("is-active")) {
            Select.unselect();
            $("#moreEdit").empty();
            $("#selBySyl").addClass("is-active");
            $("#selByNeume").removeClass("is-active");
            $("#selByNc").removeClass("is-active");
            $("#selByStaff").removeClass("is-active");
        }
    }

    $("#selByNeume").on("click", selectByNeumeHandler);
    $("body").on("keydown", (evt) => {
        if (evt.key === "2") {
            selectByNeumeHandler(evt);
        }
    });

    function selectByNeumeHandler() {
        if (!$("#selByNeume").hasClass("is-active")){
            Select.unselect();
            $("#moreEdit").empty();
            $("#selByNeume").addClass("is-active");
            $("#selByNc").removeClass("is-active");
            $("#selByStaff").removeClass("is-active");
            $("#selBySyl").removeClass("is-active");
        }
    }

    $("#selByNc").on("click", selectByNcHandler);
    $("body").on("keydown", (evt) => {
        if (evt.key === "3") {
            selectByNcHandler(evt);
        }
    });

    function selectByNcHandler() {
        if (!$("#selByNc").hasClass("is-active")) {
            Select.unselect();
            $("#moreEdit").empty();
            $("#selByNc").addClass("is-active");
            $("#selByNeume").removeClass("is-active");
            $("#selByStaff").removeClass("is-active");
            $("#selBySyl").removeClass("is-active");
        }
    }

    $("#selByStaff").on("click", selectByStaffHandler);
    $("body").on("keydown", (evt) => {
        if (evt.key === "4") {
            selectByStaffHandler(evt);
        }
    });

    function selectByStaffHandler() {
        if (!$("#selByStaff").hasClass("is-active")) {
            Select.unselect();
            $("#moreEdit").empty();
            $("#selByStaff").addClass("is-active");
            $("#selByNc").removeClass("is-active");
            $("#selByNeume").removeClass("is-active");
            $("#selBySyl").removeClass("is-active");
        }
    }
}
